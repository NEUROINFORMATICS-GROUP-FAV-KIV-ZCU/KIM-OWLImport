package cz.zcu.kiv.eeg.owlimport.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import cz.zcu.kiv.eeg.owlimport.RepositoryManager;
import cz.zcu.kiv.eeg.owlimport.gui.model.SourceListModel;
import cz.zcu.kiv.eeg.owlimport.model.SourceManager;
import cz.zcu.kiv.eeg.owlimport.model.source.AbstractSource;
import cz.zcu.kiv.eeg.owlimport.model.source.SourceImportException;
import cz.zcu.kiv.eeg.owlimport.model.source.local.FileSourceFactory;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * @author Jan Smitka <jan@smitka.org>
 */
public class MainDialog {
	private JList sourceList;
	private JList ruleList;
	private JPanel rootPanel;
	private JToolBar mainToolbar;
	private JButton importOWLButton;
	private JButton exportButton;

	private RepositoryManager repositoryManager;

	private SourceManager sourceManager;

	private SourceListModel sourcesModel;

	public MainDialog(RepositoryManager repoManager, SourceManager srcManager) {
		sourceManager = srcManager;
		repositoryManager = repoManager;

		initSourceList();

		importOWLButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				ImportSourceDialog dialog = new ImportSourceDialog(MainDialog.this.sourceManager);
				dialog.setVisible(true);

				if (dialog.getDialogResult() == DialogResult.OK) {
					AbstractSource source = dialog.createSource();
					sourceManager.addSource(source);
					try {
						repositoryManager.importSource(source);
					} catch (SourceImportException ex) {
						ex.printStackTrace();
					}
				}
			}
		});
	}

	private void initSourceList() {
		sourcesModel = new SourceListModel(sourceManager);
		sourceList.setModel(sourcesModel);
	}

	public static void main(String[] args) {
		initLookAndFeel();

		try {
			RepositoryManager repoManager = new RepositoryManager();
			SourceManager srcManager = new SourceManager();
			srcManager.registerSourceFactory(new FileSourceFactory());

			JFrame frame = new JFrame("MainDialog");
			frame.setContentPane(new MainDialog(repoManager, srcManager).rootPanel);
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.pack();
			frame.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void initLookAndFeel() {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception ex) {
			// ignore the missing system look and feel - it's just the look and feel, nothing groundbreaking
		}
	}


	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		rootPanel = new JPanel();
		rootPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
		mainToolbar = new JToolBar();
		mainToolbar.setFloatable(false);
		mainToolbar.setMargin(new Insets(0, 3, 0, 0));
		mainToolbar.setRollover(true);
		mainToolbar.putClientProperty("JToolBar.isRollover", Boolean.TRUE);
		rootPanel.add(mainToolbar, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
		importOWLButton = new JButton();
		importOWLButton.setText("Import OWL");
		mainToolbar.add(importOWLButton);
		final JToolBar.Separator toolBar$Separator1 = new JToolBar.Separator();
		mainToolbar.add(toolBar$Separator1);
		exportButton = new JButton();
		exportButton.setText("Export");
		mainToolbar.add(exportButton);
		final JScrollPane scrollPane1 = new JScrollPane();
		rootPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(177, 128), null, 0, false));
		sourceList = new JList();
		scrollPane1.setViewportView(sourceList);
		final JScrollPane scrollPane2 = new JScrollPane();
		rootPanel.add(scrollPane2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(199, 128), null, 0, false));
		ruleList = new JList();
		scrollPane2.setViewportView(ruleList);
		final JScrollPane scrollPane3 = new JScrollPane();
		rootPanel.add(scrollPane3, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(500, 300), null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return rootPanel;
	}
}
